//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/Usercode here/Tournament Input.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @TournamentInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @TournamentInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Tournament Input"",
    ""maps"": [
        {
            ""name"": ""Camera Control"",
            ""id"": ""5aa7ad65-4700-4744-b7df-009f2edbd7c6"",
            ""actions"": [
                {
                    ""name"": ""Arena Aerial Camera"",
                    ""type"": ""Button"",
                    ""id"": ""cd003909-bf20-47f8-a283-1e513910c53d"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Free Look Camera"",
                    ""type"": ""Button"",
                    ""id"": ""f73cb534-21cb-4f9e-95c9-50df955e663b"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Arena Camera A"",
                    ""type"": ""Button"",
                    ""id"": ""2fd5949e-a031-43a5-902f-47c4fe2a02cb"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Arena Camera B"",
                    ""type"": ""Button"",
                    ""id"": ""2a1dad5c-cc27-4942-bb62-88b4207c46e2"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Arena Camera C"",
                    ""type"": ""Button"",
                    ""id"": ""86ddd6e4-da1d-41f1-93ff-53f5d520d845"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Arena Finish Zone Camera"",
                    ""type"": ""Button"",
                    ""id"": ""de83ccda-5d55-498a-861b-36dfbd6d5f2b"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Random Agent"",
                    ""type"": ""Button"",
                    ""id"": ""300269d1-2868-4b73-880c-370764ecf1bb"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""8ee1a8f2-4b26-4cc9-8ca7-4f1343d7487c"",
                    ""path"": ""<Keyboard>/0"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Arena Aerial Camera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4bc69377-8c16-4773-99ec-016e29fc704c"",
                    ""path"": ""<Keyboard>/5"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Free Look Camera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""29d0394d-3e9c-49fb-bc53-88bdd3ad415f"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Arena Camera A"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""07472978-7212-4ec6-8c21-f64957ce8258"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Arena Camera B"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5b9d517c-a690-4a18-be6a-2fdbdd3c11a8"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Arena Camera C"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c8cebad0-cb49-4a1e-8fe5-c691621482c8"",
                    ""path"": ""<Keyboard>/4"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Arena Finish Zone Camera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3823900b-0647-43af-8e5c-f8f4b0480d27"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Random Agent"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard and Mouse"",
            ""bindingGroup"": ""Keyboard and Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Camera Control
        m_CameraControl = asset.FindActionMap("Camera Control", throwIfNotFound: true);
        m_CameraControl_ArenaAerialCamera = m_CameraControl.FindAction("Arena Aerial Camera", throwIfNotFound: true);
        m_CameraControl_FreeLookCamera = m_CameraControl.FindAction("Free Look Camera", throwIfNotFound: true);
        m_CameraControl_ArenaCameraA = m_CameraControl.FindAction("Arena Camera A", throwIfNotFound: true);
        m_CameraControl_ArenaCameraB = m_CameraControl.FindAction("Arena Camera B", throwIfNotFound: true);
        m_CameraControl_ArenaCameraC = m_CameraControl.FindAction("Arena Camera C", throwIfNotFound: true);
        m_CameraControl_ArenaFinishZoneCamera = m_CameraControl.FindAction("Arena Finish Zone Camera", throwIfNotFound: true);
        m_CameraControl_RandomAgent = m_CameraControl.FindAction("Random Agent", throwIfNotFound: true);
    }

    ~@TournamentInput()
    {
        UnityEngine.Debug.Assert(!m_CameraControl.enabled, "This will cause a leak and performance issues, TournamentInput.CameraControl.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Camera Control
    private readonly InputActionMap m_CameraControl;
    private List<ICameraControlActions> m_CameraControlActionsCallbackInterfaces = new List<ICameraControlActions>();
    private readonly InputAction m_CameraControl_ArenaAerialCamera;
    private readonly InputAction m_CameraControl_FreeLookCamera;
    private readonly InputAction m_CameraControl_ArenaCameraA;
    private readonly InputAction m_CameraControl_ArenaCameraB;
    private readonly InputAction m_CameraControl_ArenaCameraC;
    private readonly InputAction m_CameraControl_ArenaFinishZoneCamera;
    private readonly InputAction m_CameraControl_RandomAgent;
    public struct CameraControlActions
    {
        private @TournamentInput m_Wrapper;
        public CameraControlActions(@TournamentInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @ArenaAerialCamera => m_Wrapper.m_CameraControl_ArenaAerialCamera;
        public InputAction @FreeLookCamera => m_Wrapper.m_CameraControl_FreeLookCamera;
        public InputAction @ArenaCameraA => m_Wrapper.m_CameraControl_ArenaCameraA;
        public InputAction @ArenaCameraB => m_Wrapper.m_CameraControl_ArenaCameraB;
        public InputAction @ArenaCameraC => m_Wrapper.m_CameraControl_ArenaCameraC;
        public InputAction @ArenaFinishZoneCamera => m_Wrapper.m_CameraControl_ArenaFinishZoneCamera;
        public InputAction @RandomAgent => m_Wrapper.m_CameraControl_RandomAgent;
        public InputActionMap Get() { return m_Wrapper.m_CameraControl; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CameraControlActions set) { return set.Get(); }
        public void AddCallbacks(ICameraControlActions instance)
        {
            if (instance == null || m_Wrapper.m_CameraControlActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CameraControlActionsCallbackInterfaces.Add(instance);
            @ArenaAerialCamera.started += instance.OnArenaAerialCamera;
            @ArenaAerialCamera.performed += instance.OnArenaAerialCamera;
            @ArenaAerialCamera.canceled += instance.OnArenaAerialCamera;
            @FreeLookCamera.started += instance.OnFreeLookCamera;
            @FreeLookCamera.performed += instance.OnFreeLookCamera;
            @FreeLookCamera.canceled += instance.OnFreeLookCamera;
            @ArenaCameraA.started += instance.OnArenaCameraA;
            @ArenaCameraA.performed += instance.OnArenaCameraA;
            @ArenaCameraA.canceled += instance.OnArenaCameraA;
            @ArenaCameraB.started += instance.OnArenaCameraB;
            @ArenaCameraB.performed += instance.OnArenaCameraB;
            @ArenaCameraB.canceled += instance.OnArenaCameraB;
            @ArenaCameraC.started += instance.OnArenaCameraC;
            @ArenaCameraC.performed += instance.OnArenaCameraC;
            @ArenaCameraC.canceled += instance.OnArenaCameraC;
            @ArenaFinishZoneCamera.started += instance.OnArenaFinishZoneCamera;
            @ArenaFinishZoneCamera.performed += instance.OnArenaFinishZoneCamera;
            @ArenaFinishZoneCamera.canceled += instance.OnArenaFinishZoneCamera;
            @RandomAgent.started += instance.OnRandomAgent;
            @RandomAgent.performed += instance.OnRandomAgent;
            @RandomAgent.canceled += instance.OnRandomAgent;
        }

        private void UnregisterCallbacks(ICameraControlActions instance)
        {
            @ArenaAerialCamera.started -= instance.OnArenaAerialCamera;
            @ArenaAerialCamera.performed -= instance.OnArenaAerialCamera;
            @ArenaAerialCamera.canceled -= instance.OnArenaAerialCamera;
            @FreeLookCamera.started -= instance.OnFreeLookCamera;
            @FreeLookCamera.performed -= instance.OnFreeLookCamera;
            @FreeLookCamera.canceled -= instance.OnFreeLookCamera;
            @ArenaCameraA.started -= instance.OnArenaCameraA;
            @ArenaCameraA.performed -= instance.OnArenaCameraA;
            @ArenaCameraA.canceled -= instance.OnArenaCameraA;
            @ArenaCameraB.started -= instance.OnArenaCameraB;
            @ArenaCameraB.performed -= instance.OnArenaCameraB;
            @ArenaCameraB.canceled -= instance.OnArenaCameraB;
            @ArenaCameraC.started -= instance.OnArenaCameraC;
            @ArenaCameraC.performed -= instance.OnArenaCameraC;
            @ArenaCameraC.canceled -= instance.OnArenaCameraC;
            @ArenaFinishZoneCamera.started -= instance.OnArenaFinishZoneCamera;
            @ArenaFinishZoneCamera.performed -= instance.OnArenaFinishZoneCamera;
            @ArenaFinishZoneCamera.canceled -= instance.OnArenaFinishZoneCamera;
            @RandomAgent.started -= instance.OnRandomAgent;
            @RandomAgent.performed -= instance.OnRandomAgent;
            @RandomAgent.canceled -= instance.OnRandomAgent;
        }

        public void RemoveCallbacks(ICameraControlActions instance)
        {
            if (m_Wrapper.m_CameraControlActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICameraControlActions instance)
        {
            foreach (var item in m_Wrapper.m_CameraControlActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CameraControlActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CameraControlActions @CameraControl => new CameraControlActions(this);
    private int m_KeyboardandMouseSchemeIndex = -1;
    public InputControlScheme KeyboardandMouseScheme
    {
        get
        {
            if (m_KeyboardandMouseSchemeIndex == -1) m_KeyboardandMouseSchemeIndex = asset.FindControlSchemeIndex("Keyboard and Mouse");
            return asset.controlSchemes[m_KeyboardandMouseSchemeIndex];
        }
    }
    public interface ICameraControlActions
    {
        void OnArenaAerialCamera(InputAction.CallbackContext context);
        void OnFreeLookCamera(InputAction.CallbackContext context);
        void OnArenaCameraA(InputAction.CallbackContext context);
        void OnArenaCameraB(InputAction.CallbackContext context);
        void OnArenaCameraC(InputAction.CallbackContext context);
        void OnArenaFinishZoneCamera(InputAction.CallbackContext context);
        void OnRandomAgent(InputAction.CallbackContext context);
    }
}
